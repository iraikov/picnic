; -*- Hen -*-


(require-extension lalr)
(define calc-parser
  (lalr-parser

   ;; --- Options 
   ;; output a parser, called calc-parser, in a separate file - calc.yy.scm, 
   (output:    calc-parser "calc.yy.scm")
   ;; output the LALR table to calc.grm.out
   (out-table: "calc.grm.out")
   ;; there should be no conflict
   (expect:    5)

   ;; --- token definitions
   (ID NUM = LPAREN RPAREN NEWLINE COMMA STRING FUNCTION
       (left: + -)
       (left: * /)
       (nonassoc: uminus))

   ;; --- rules
   (line     (assign NEWLINE)        : $1
             (expr   NEWLINE)        : $1
	     (NEWLINE)               : #f
             (error  NEWLINE)        : #f)

   (assign   (ID = expr)             : (add-binding $1 $3))

;;   (defn   (FUNC LPAREN args RPAREN LBRACE expr RBRACE)             : (add-binding $1 $3))

   (expr     (expr + expr)           : (+ $1 $3)
             (expr - expr)           : (- $1 $3)
             (expr * expr)           : (* $1 $3)
             (expr / expr)           : (/ $1 $3)
             (- expr (prec: uminus)) : (- $2)
             (ID)                    : (get-binding $1)
             (ID LPAREN args RPAREN) : (invoke-func $1 $3)
             (NUM)                   : $1
             (LPAREN expr RPAREN)    : $2)

   (args     ()                      : '()
             (expr arg-rest)         : (cons $1 $2)
             (STRING arg-rest)       : (cons $1 $2))

   (arg-rest (COMMA expr arg-rest)   : (cons $2 $3)
             (COMMA STRING arg-rest) : (cons $2 $3)
             ()                      : '())

   ))
